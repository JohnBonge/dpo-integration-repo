generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model TourPackage {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  description String      @db.Text
  duration    Int
  price       Decimal     @db.Decimal(10, 2)
  location    String
  coverImage  String
  dates       DateTime[]  @default([])
  included    String[]    @default([])
  excluded    String[]    @default([])
  itinerary   Itinerary[]
  bookings    Booking[]
  reviews     Review[]
  auditLogs   AuditLog[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Itinerary {
  id            String      @id @default(cuid())
  day           Int
  title         String
  description   String      @db.Text
  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Booking {
  id              String         @id @default(cuid())
  status          BookingStatus  @default(PENDING)
  customerName    String
  customerEmail   String
  phone           String?
  country         String?
  participants    Int
  startDate       DateTime
  totalAmount     Decimal
  paymentStatus   PaymentStatus  @default(PENDING)
  paymentIntentId String?
  tourPackageId   String
  tourPackage     TourPackage    @relation(fields: [tourPackageId], references: [id])
  paidAt          DateTime?
  confirmedAt     DateTime?
  cancelledAt     DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  paymentEvents   PaymentEvent[]
  auditLogs       AuditLog[]
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  

  @@index([tourPackageId])
  @@index([userId])
  @@index([createdAt])
  @@index([startDate])
  @@index([status])
  @@index([status, createdAt])
}

model PaymentEvent {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  bookingId String
  booking   Booking  @relation(fields: [bookingId], references: [id])
  event     String
  metadata  Json?

  @@index([bookingId])
}

model AuditLog {
  id          String       @id @default(cuid())
  createdAt   DateTime     @default(now())
  action      String
  bookingId   String?
  booking     Booking?     @relation(fields: [bookingId], references: [id])
  tourId      String?
  tourPackage TourPackage? @relation(fields: [tourId], references: [id])
  metadata    Json?

  @@index([bookingId])
  @@index([tourId])
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
  DISPUTED
}

enum PaymentStatus {
  PENDING
  PROCESSING
  PAID
  FAILED
  REFUNDED
}

enum UserRole {
  ADMIN
  USER
  GUEST
}

model User {
  id                 String              @id @default(cuid())
  name               String?
  email              String?             @unique
  emailVerified      DateTime?
  password           String?
  role               String              @default("USER")
  image              String?
  phone              String?
  country            String?
  accounts           Account[]
  sessions           Session[]
  verificationTokens VerificationToken[]
  bookings           Booking[]
  reviews            Review[]

  @@index([email])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Review {
  id            String      @id @default(cuid())
  rating        Int
  comment       String      @db.Text
  authorName    String
  source        String // e.g., "website", "google", etc.
  tourPackage   TourPackage @relation(fields: [tourPackageId], references: [id], onDelete: Cascade)
  tourPackageId String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  user          User        @relation(fields: [userId], references: [id])
  userId        String

  @@index([userId])
}

model Story {
  id          String      @id @default(cuid())
  title       String
  slug        String      @unique
  content     String      @db.Text
  image       String?
  status      StoryStatus @default(PENDING)
  authorName  String
  authorEmail String
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@index([status])
  @@index([authorEmail])
  @@index([createdAt])
  @@index([status, createdAt])
  @@index([slug])
}

enum StoryStatus {
  PENDING
  APPROVED
  REJECTED
}

model Faq {
  id        String   @id @default(cuid())
  question  String
  answer    String
  category  String
  order     Int      @default(0)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([category])
  @@index([order])
  @@index([createdAt])
  @@index([category, order, createdAt])
  @@index([category, order])
  @@map("faqs")
}

model VerificationToken {
  id        String   @id @default(cuid())
  token     String   @unique
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  expires   DateTime
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([token])
}

model UserActivity {
  id        Int      @id @default(autoincrement())
  userId    String
  createdAt DateTime @default(now())

  @@unique([userId, createdAt])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}
